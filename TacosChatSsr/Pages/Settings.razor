@page "/settings"
@inject ILocalStorageService _localStorage
@inject NavigationManager _navigationManager

<h3>Settings</h3>

<button @onclick="() => GoToHome()">Back</button>

<div style="display: flex; flex-direction: column; gap: 1rem;">
    <div>
        <label for="twitch-client-id">Twitch Client ID</label>
        <input id="twitch-client-id" @bind="_settings.TwitchClientId" />
    </div>
    <div>
        <label for="twitch-client-secret">Twitch Username</label>
        <input id="twitch-client-secret" @bind="_settings.TwitchUserName" />
    </div>
    <button @onclick="SaveSettings">Save</button>
</div>

<div style="display: flex; flex-direction: column; gap: 1rem;">
    <div>
        @if (isConnected)
        {
            <label for="twitch-access-token">Twitch Access Token</label>
            <input id="twitch-access-token" @bind="_settings.TwitchUserAccessToken" disabled />
            <button @onclick="Disconnect">Disconnect</button>
        }
        else
        {
            <a href="@GetLoginUrl()">Connect</a>
        }
    </div>
</div>

status: @status

@code
{
    private TacosSettings _settings = new();
    private bool isConnected = false;
    private string _twitchRedirectUri = "https://localhost:7137/settings";
    private string status = "nothing";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _settings = await _localStorage.GetItemAsync<TacosSettings>("TacosSettings") ?? new TacosSettings();

            if (_settings.TwitchUserAccessToken != "")
            {
                isConnected = true;
            }

            var uri = _navigationManager.ToAbsoluteUri(_navigationManager.Uri).ToString();

            if (uri.Contains("access_token"))
            {
                var accessToken = uri.Split('&');
                var token = accessToken[0].Split('=');
                _settings.TwitchUserAccessToken = token[1];
                isConnected = true;
                status = "got a token";
                SaveSettings();
            }
            else
            {
                status = "no token";
            }

            StateHasChanged();
        }
    }

    void GoToHome()
    {
        _navigationManager.NavigateTo("/");
    }

    void SaveSettings()
    {
        _localStorage.SetItemAsync("TacosSettings", _settings);
    }

    void Disconnect()
    {
        _settings.TwitchUserAccessToken = "";
        SaveSettings();
        isConnected = false;
    }

    string GetLoginUrl()
    {
        return $"https://id.twitch.tv/oauth2/authorize?client_id={_settings.TwitchClientId}&redirect_uri={_twitchRedirectUri}&response_type=token&scope=chat:read";
    }
}