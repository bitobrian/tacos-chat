@page "/settings"
@inject SettingsRepo _settingsRepo

<h3>Settings</h3>

<form class="p-5">
    <div class="space-y-12 p-5">
        <div class="border-b border-gray-900/10 pb-12">
            <h2 class="text-base font-semibold leading-7 text-gray-900">Profile</h2>
            <p class="mt-1 text-sm leading-6 text-gray-600">This information will be displayed publicly so be careful what you share.</p>

            <div class="mt-10 grid grid-cols-1 gap-x-6 gap-y-8 sm:grid-cols-6">
                <div class="sm:col-span-4">
                    <label for="username" class="block text-sm font-medium leading-6 text-gray-900">Username</label>
                    <div class="mt-2">
                        <div class="flex rounded-md shadow-sm ring-1 ring-inset ring-gray-300 focus-within:ring-2 focus-within:ring-inset focus-within:ring-indigo-600 sm:max-w-md">
                            <span class="flex select-none items-center pl-3 text-gray-500 sm:text-sm">twitch.tv/</span>
                            <input type="text" name="username" id="username" autocomplete="username" @bind="@_settings.TwitchUserName" class="block flex-1 border-0 bg-transparent py-1.5 pl-1 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6" placeholder="janesmith">
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="mt-6 flex items-center justify-end gap-x-6">
        <button type="button" class="text-sm font-semibold leading-6 text-gray-900">Cancel</button>
        <button type="submit" class="rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">Save</button>
    </div>
</form>

<input type="checkbox" @bind="@_settings.IsLive" />
<label for="isLive">Is Live</label>
<button @onclick="SaveSettings">Save</button>

@code
{
    [CascadingParameter(Name = "ErrorContext")]
    public ErrorContext ErrorContext { get; set; }

    private Settings _settings = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var test = _settingsRepo.GetSettings("default");

            _settings = test;
        }
        catch (Exception ex)
        {
            ErrorContext.SetThrowError(ex);
        }

        await Task.CompletedTask;
    }

    private bool IsSecretSet()
    {
        return string.IsNullOrEmpty(_settings.TwitchClientSecret);
    }

    private void SaveSettings()
    {
        _settingsRepo.SaveSetting("default", _settings);
    }
}
