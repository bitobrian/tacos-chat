@namespace TacosChat.Components
@inject ILocalStorageService _localStorage
@inject NavigationManager _navigationManager

<div class="window" style="width: 100%; height: 500px;">
  <div class="title-bar">
    <div class="title-bar-text">Twitch Chat - @_messages.Count Messages</div>
    <div class="title-bar-controls">
        <button aria-label="Help" @onclick="GoToSettings"></button>
        <button aria-label="Minimize"></button>
        <button aria-label="Maximize"></button>
        <button aria-label="Close"></button>
    </div>
  </div>
  <div class="window-body" style="height: 100%;">
    @if (!_isErrorState)
    {
        <ul class="tree-view" style="height: 90%; overflow-y: scroll;">
            @foreach(var chatMessage in _messages)
            {
                <li>
                    @chatMessage.Timestamp.ToString("hh:mm:ss"): @chatMessage.Message
                </li>
            }
        </ul>
    }
    else
    {
        <p>Unable to load settings from local storage.</p>
    }
  </div>
</div>

@code
{
    private PeriodicTimer _timer = new PeriodicTimer(TimeSpan.FromMilliseconds(500));
    private List<TacosChatMessage> _messages = new();
    private int _messageCountMax = 30;
    private TacosSettings _settings = new();
    private bool _isErrorState = false;
    private TwitchClient _client;

    protected override async Task OnInitializedAsync()
    {
        var settings = await _localStorage.GetItemAsync<TacosSettings>("TacosSettings");

        if (settings != null)
        {
            Console.WriteLine("Settings not null");

            _settings = settings;

            var credentials = new ConnectionCredentials(_settings.TwitchUserName, _settings.TwitchUserAccessToken);
            var options = new ClientOptions
                {
                    MessagesAllowedInPeriod = 750,
                    ThrottlingPeriod = TimeSpan.FromSeconds(30),
                };

            _client = new TwitchClient(new WebSocketClient(options));

            Console.WriteLine("Initializing Twitch");
            _client.Initialize(credentials, _settings.TwitchUserName);

            _client.OnMessageReceived += (sender, e) =>
            {
                Console.WriteLine("Message for you, sir!");
                AddChatMessage(e.ChatMessage.Message);
                StateHasChanged();
            };

            _client.OnConnected += (sender, e) =>
            {
                Console.WriteLine("Connected to Twitch");
            };
            _client.OnDisconnected += (sender, e) =>
            {
                Console.WriteLine("Disconnected from Twitch");
            };
        }
        else
        {
            _isErrorState = true;
        }
    }

    async Task StartTimer()
    {
        while (true)
        {
            await _timer.WaitForNextTickAsync();
            AddChatMessage("Hello World");
            StateHasChanged();
        }
    }

    void AddChatMessage(string message)
    {
        _messages.Add(new TacosChatMessage(DateTime.Now, message));
        
        // Only keep the last 25 messages
        if (_messages.Count > _messageCountMax)
        {
            _messages.RemoveRange(0, _messages.Count - _messageCountMax);
        }
    }

    void GoToSettings()
    {
        _navigationManager.NavigateTo("/settings");
    }
}